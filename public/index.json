[{"authors":["david"],"categories":null,"content":"Although trained as a physicist, I\u0026rsquo;m now working as a data scientist in industry.\nThis webpage is still a work in progress\u0026hellip;\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"a188323511e886023c2ed76753cf8aaf","permalink":"/authors/david/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/david/","section":"authors","summary":"Although trained as a physicist, I\u0026rsquo;m now working as a data scientist in industry.\nThis webpage is still a work in progress\u0026hellip;","tags":null,"title":"David Hall","type":"authors"},{"authors":null,"categories":["Python"],"content":"  This blog post has been copied from my old particle physics blog.\nI have written an extension to the PyYAML Loader class that allows you to include/import YAML files from within another YAML file.\nI’m currently writing a program that will data from a YAML file and create a CV using a template engine. To aid flexibility, I wanted to allow the user to be able to include separate YAML files (e.g. education.yaml, skills.yaml, etc) within a master YAML file which would then be used to make the CV.\nAn initial search found this, which allows users to include a YAML file from within another. However, it’s quite a limited solution – it assumes you only want to include a single file. For my CV program, I wanted to be able to include multiple files within a single section. This could let you have separate files containing publications according to subject, and then include different groups of publications for different CVs.\nMy solution now supports all three kinds of YAML node: scalar, sequence and mapping. The class could alternatively derive from yaml.CLoader for improved performance when the C++ LibYAML bindings are available.\nimport yaml import os.path class Loader(yaml.Loader): def __init__(self, stream): self._root = os.path.split(stream.name)[0] super(Loader, self).__init__(stream) Loader.add_constructor(\u0026#39;!include\u0026#39;, Loader.include) Loader.add_constructor(\u0026#39;!import\u0026#39;, Loader.include) def include(self, node): if isinstance(node, yaml.ScalarNode): return self.extractFile(self.construct_scalar(node)) elif isinstance(node, yaml.SequenceNode): result = [] for filename in self.construct_sequence(node): result += self.extractFile(filename) return result elif isinstance(node, yaml.MappingNode): result = {} for k,v in self.construct_mapping(node).iteritems(): result[k] = self.extractFile(v) return result else: print \u0026quot;Error:: unrecognised node type in !include statement\u0026quot; raise yaml.constructor.ConstructorError def extractFile(self, filename): filepath = os.path.join(self._root, filename) with open(filepath, \u0026#39;r\u0026#39;) as f: return yaml.load(f, Loader) Please note that the arguments to !include and !import must be on the same line (due to PyYAML parser). This allows you to specify YAML files like:\neducation: !include education.yaml activities: !include [schools.yaml, conferences.yaml, workshops.yaml] publications: !include {peer_reviewed: publications/peer_reviewed.yaml, internal: publications/internal.yaml} This Loader class is passed to yaml.load() like so:\nfrom yaml import load with open(\u0026#39;document.yaml\u0026#39;, \u0026#39;r\u0026#39;) as f: data = load(f, Loader=Loader) ","date":1370649600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1370649600,"objectID":"5ca7808fee7ad75263cd4eae53133653","permalink":"/blog/2013-06-08/yaml-includes/","publishdate":"2013-06-08T00:00:00Z","relpermalink":"/blog/2013-06-08/yaml-includes/","section":"blog","summary":"This blog post has been copied from my old particle physics blog.\nI have written an extension to the PyYAML Loader class that allows you to include/import YAML files from within another YAML file.\nI’m currently writing a program that will data from a YAML file and create a CV using a template engine. To aid flexibility, I wanted to allow the user to be able to include separate YAML files (e.","tags":["YAML","PyYAML"],"title":"Including YAML files within YAML files","type":"blog"}]